{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","registerServiceWorker.js","index.js"],"names":["Card","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","species","_this2","fetch","props","then","resp","json","setState","name","catch","_this$props","weight","id","birth","gender","react_default","a","createElement","className","alt","src","concat","Component","CardList","_ref","listPeople","api_data","map","user","i","components_Card","key","url","mass","birth_year","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflow","border","height","marginTop","background","boxShadow","children","App","onSearchChange","event","target","value","console","log","urlsArray","push","toString","charsData","charsFetch","res","data","results","Promise","all","err","_this$state","filteredData","sort","b","localeCompare","filter","person","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_CardList","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","ReactDOM","render","src_containers_App","document","getElementById","URL","process","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.e70bef38.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../containers/App.css';\r\n\r\nclass Card extends Component {\r\n  \r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      species: ['Fetching species...'],\r\n      // films: ['Loading films...']\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    // SPECIES //\r\n      fetch(this.props.species[0])\r\n        .then(resp => resp.json())\r\n        .then(json => this.setState({species: json.name}))\r\n        .catch(() => this.setState({species: 'Species Unknown'}));\r\n\r\n    // FILMS //\r\n\r\n    // const filmsArray = [];\r\n\r\n    // const fetchFilms = this.props.films.map((filmUrl, i) => fetch(filmUrl)\r\n    //     .then(res => res.json())\r\n    //     .then(data => {\r\n    //       filmsArray.push(`0${data.episode_id} - ${data.title}`);\r\n    //       filmsArray.sort();\r\n    //     }));\r\n\r\n    // Promise.all(fetchFilms)\r\n    //     .then(promisesArray => { this.setState({films:filmsArray}) })\r\n    //     .catch((err) => console.log('error: ', err))\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  render() {\r\n    const { name, weight, id, birth, gender } = this.props;\r\n\r\n    return (\r\n      <div className='Card tc grow bg-washed-yellow br3 pa3 ma3 dib bw2 shadow-5'>\r\n        <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n        <p><b>Name:</b> { name } </p>\r\n        <p><b>Weight:</b> { weight }</p>\r\n        <p><b>Birth:</b> { birth }</p>\r\n        <p><b>Gender:</b> { gender }</p>\r\n        <p><b>Species:</b> { this.state.species }</p>\r\n        \r\n        {/* <p> id: { id }</p> */}\r\n        {/* <div className='films-list'>Featured in:\r\n            <ul>\r\n              { this.state.films.map((film, i) => (\r\n                <li key={i}>\r\n                  { film }\r\n                </li>\r\n              ))}\r\n            </ul>\r\n        </div> */}\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ api_data }) => {\r\n  const listPeople = api_data.map((user, i) => {\r\n    return (\r\n      <Card\r\n        id = {i+=1}\r\n        key={user.url}\r\n        name={user.name}\r\n        weight={user.mass}\r\n        birth={user.birth_year}\r\n        gender={user.gender}\r\n        species={user.species}\r\n      />\r\n    )}\r\n  )\r\n  \r\n  return (\r\n    <div>\r\n      {listPeople}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflow: 'scroll', border: '1px solid black', height: '800px', marginTop: '25px', background:'rgba(0, 0, 0, 0.8)', boxShadow: '0 0 2px 2px #FFEE58'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n// import { promised } from 'q';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      api_data: [], //empty array to retrieve a list from an API\r\n      searchfield: ''\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    const urlsArray = [];\r\n\r\n    for(let i = 1; i < 10; i++) {\r\n      urlsArray.push('https://swapi.co/api/people/?page=' + i.toString());\r\n    }\r\n\r\n    const charsData = [];\r\n\r\n    const charsFetch = urlsArray.map(url => fetch(url)\r\n        .then(res => res.json())\r\n        .then(data => data.results.map(user => charsData.push(user)))\r\n    );\r\n\r\n    Promise.all(charsFetch)\r\n      .then(results => this.setState({api_data: charsData}))\r\n      .catch((err) => console.log('ERROR, please check', err))\r\n\r\n  }\r\n\r\n  onSearchChange = (event) => {\r\n    this.setState({ searchfield: event.target.value })\r\n    console.log(event.target.value, \"searchbox\");\r\n  }\r\n\r\n  render() {\r\n\r\n    const { api_data, searchfield } = this.state;\r\n   \r\n    const sortedData = api_data.sort((a, b) => a.name.localeCompare(b.name)); // Sorts fetched data\r\n\r\n    const filteredData = sortedData.filter(person =>{\r\n      return person.name.toLowerCase().includes(searchfield.toLowerCase()); // Converts all names to lowercase for searchfield\r\n    })\r\n\r\n    console.log(filteredData, \"filter\")\r\n\r\n    return !api_data.length ?\r\n      <h1>Loading</h1> :\r\n      (\r\n        <div className='tc'>\r\n          <h1 className='f1 Title'>STAR WARS</h1>\r\n          <h2 className='Sub-title'>Robot Card Collection</h2>\r\n          <SearchBox searchChange={this.onSearchChange}/>\r\n          <Scroll>\r\n            <CardList api_data={filteredData} />\r\n          </Scroll>\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default App;","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}